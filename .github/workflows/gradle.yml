name: CI + release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Manual trigger support
env:
  DEBUG: false

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Set environment CI_ variables
        id: ci-env
        uses: FranzDiebold/github-env-vars-action@v2

      - name: Print environment variables
        if: env.DEBUG == 'true'
        run: |
          echo "CI_REPOSITORY_SLUG=$CI_REPOSITORY_SLUG"
          echo "CI_REPOSITORY_OWNER=$CI_REPOSITORY_OWNER"
          echo "CI_REPOSITORY_OWNER_SLUG=$CI_REPOSITORY_OWNER_SLUG"
          echo "CI_REPOSITORY_NAME=$CI_REPOSITORY_NAME"
          echo "CI_REPOSITORY_NAME_SLUG=$CI_REPOSITORY_NAME_SLUG"
          echo "CI_REPOSITORY=$CI_REPOSITORY"
          echo "CI_REF_SLUG=$CI_REF_SLUG"
          echo "CI_ACTION_REF_NAME=$CI_ACTION_REF_NAME"
          echo "CI_ACTION_REF_NAME_SLUG=$CI_ACTION_REF_NAME_SLUG"
          echo "CI_REF_NAME=$CI_REF_NAME"
          echo "CI_REF_NAME_SLUG=$CI_REF_NAME_SLUG"
          echo "CI_REF=$CI_REF"
          echo "CI_HEAD_REF_SLUG=$CI_HEAD_REF_SLUG"
          echo "CI_HEAD_REF=$CI_HEAD_REF"
          echo "CI_BASE_REF_SLUG=$CI_BASE_REF_SLUG"
          echo "CI_BASE_REF=$CI_BASE_REF"
          echo "CI_SHA_SHORT=$CI_SHA_SHORT"
          echo "CI_SHA=$CI_SHA"
          echo "CI_PR_SHA_SHORT=$CI_PR_SHA_SHORT"
          echo "CI_PR_SHA=$CI_PR_SHA"
          echo "CI_PR_NUMBER=$CI_PR_NUMBER"
          echo "CI_PR_ID=$CI_PR_ID"
          echo "CI_PR_TITLE=$CI_PR_TITLE"
          echo "CI_PR_DESCRIPTION=$CI_PR_DESCRIPTION"
          echo "CI_ACTOR=$CI_ACTOR"
          echo "CI_EVENT_NAME=$CI_EVENT_NAME"
          echo "CI_RUN_ID=$CI_RUN_ID"
          echo "CI_RUN_NUMBER=$CI_RUN_NUMBER"
          echo "CI_WORKFLOW=$CI_WORKFLOW"
          echo "CI_ACTION=$CI_ACTION"

      - name: Get next version tag
        id: get_version
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"

          # Get current version, e.g., "2.1.18"
          current_version=$(jq -r '.latestVersion' ripme.json | cut -d '-' -f1)

          # Split into major, minor, patch
          IFS='.' read -r major minor patch <<< "$current_version"

          # Increment the patch version
          patch=$((patch + 1))

          # Extract base version from ripme.json (e.g., "2.1.18-123-abc123" -> "2.1.18")
          current_version=$(jq -r '.latestVersion' ripme.json | cut -d '-' -f1)

          # Split into major, minor, patch
          IFS='.' read -r major minor patch <<< "$current_version"

          # Increment patch version
          patch=$((patch + 1))

          # Reconstruct base version
          version_base="${major}.${minor}.${patch}"

          # Get commit count and short SHA
          commit_count=$(git rev-list --count HEAD)
          commit_sha=$(git rev-parse --short HEAD)

          # Construct full next version: e.g., 2.1.19-456-abcd123
          next_version="${version_base}-${commit_count}-${commit_sha}"

          # Tag the commit (but don't push here â€” do that later explicitly)
          git tag "$next_version" -m "$(git log -n 5 --pretty=format:'%h %s')"

          # Output for GitHub Actions
          echo "next_version=$next_version" >> "$GITHUB_OUTPUT"


      - name: Set up Java
        uses: actions/setup-java@v4.2.1
        with:
          java-version: 17
          distribution: zulu
          cache: gradle

      - name: Build with Gradle
        run: gradle clean assemble -PjavacRelease=17

      - name: Rename JAR
        run: |
          mkdir -p dist
          new_name="ripme-${{ steps.get_version.outputs.next_version }}.jar"
          cp build/libs/*.jar dist/$new_name

      - name: Generate ripme.json
        run: |
          version="${{ steps.get_version.outputs.next_version }}"
          file="ripme-${version}.jar"
          hash=$(sha256sum dist/$file | awk '{ print $1 }')
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          # Try to get the latest tag, fallback to initial commit if none exist
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [[ -n "$last_tag" ]]; then
            commit_messages=$(git log -n 10 --pretty=format:"%s" | sed 's/"/\\"/g')
          else
            commit_messages="Some work done to improve for use case."
          fi

          # Format the changeList as a JSON array of strings
          changes_json=$(printf '%s\n' "$commit_messages" | sed "s/^/\"${version}: /; s/$/\",/" | sed '$ s/,$//')
          changes_json="${changes_json}, \"${version}: Built at ${timestamp}\""

          # Write ripme.json
          echo "{
            \"latestVersion\": \"${version}\",
            \"currentHash\": \"${hash}\",
            \"changeList\": [
              ${changes_json}
            ]
          }" > ripme.json
          echo "Generated ripme.json content:"
          cat ripme.json


      - name: Commit and tag version
        run: |
          #git config user.name "github-actions"
          #git config user.email "github-actions@users.noreply.github.com"

          # Commit version update
          git add ripme.json
          git commit -m "Update ripme.json for ${{ steps.get_version.outputs.next_version }}" || echo "No changes to commit"

          # Push to main
          git push origin main

          # Tag current commit
          # git tag v${{ steps.get_version.outputs.next_version }} -m "$(git log -n 10 --pretty=format:'%h %s')"
          git push origin ${{ steps.get_version.outputs.next_version }}
          
      - name: Publish release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ steps.get_version.outputs.next_version }}"
          prerelease: false
          title: "${{ steps.get_version.outputs.next_version }}"
          files: |
            dist/*.jar
            ripme.json

      - name: Delete previous releases except latest
        run: |
          gh release list --limit 100 --json tagName,createdAt --jq '.[].tagName' |
          grep -v "^${{ steps.get_version.outputs.next_version }}$" |
          xargs -I {} gh release delete {} -y
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}